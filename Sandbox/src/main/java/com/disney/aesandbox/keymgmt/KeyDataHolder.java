package com.disney.aesandbox.keymgmt;

import com.disney.aesandbox.objmapping.RSAKey;

import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Date;

/**
 * Container class for all artifacts related to a public/private key set:
 * - their Java object representation
 * - their representation as a Jackson ObjectMapper-friendly object, used for transforming to JWK representation
 *     (this is particularly important to keep the key ID (kid) together with the PrivateKey representation, since
 *     the kid is not part of the Java Key object, it's generated by application code).
 * - their creation timestamp
 */
public class KeyDataHolder {

    private PublicKey publicKey;
    private PrivateKey privateKey;
    private RSAKey rsaKey;
    private long timestamp;

    public KeyDataHolder(PublicKey pub, PrivateKey priv, RSAKey artifacts) {

        setPublicKey(pub);
        setPrivateKey(priv);
        setRsaKey(artifacts);
        stamp();
    }

    /**
     * @return
     */
    public PublicKey getPublicKey() {
        // This method is probably not needed, just included for completeness.  Public keys should be read from the endpoint
        // in JWK form and transformed to a Java PublicKey object, making access from this object unnecessary.
        return publicKey;
    }

    public void setPublicKey(PublicKey publicKey) {
        this.publicKey = publicKey;
    }

    public PrivateKey getPrivateKey() {
        return privateKey;
    }

    public void setPrivateKey(PrivateKey privateKey) {
        this.privateKey = privateKey;
    }

    public RSAKey getRsaKey() {
        return rsaKey;
    }

    public void setRsaKey(RSAKey rsaKey) {
        this.rsaKey = rsaKey;
    }

    public long getTimestamp() {
        return timestamp;
    }

    private void stamp() {
        timestamp = System.currentTimeMillis();
    }

    public boolean equals(Object other) {
        boolean result = false;

        if (other instanceof KeyDataHolder) {
            result = ((KeyDataHolder) other).publicKey.equals(publicKey);
        }

        return result;
    }

    public String toString() {
        return rsaKey.toString() + ", created at " + new Date(getTimestamp());
    }
}
